#!/usr/bin/env python
import platform as os_platform

LIBS_COMMON = ["avcodec", "avformat", "avutil", "swresample", "swscale"]
MARCH_FLAGS = {
    "x86_64": "x86-64",
    "arm64": "armv8-a",
}


env = SConscript("godot_cpp/SConstruct")

env_suffix = env["suffix"]
env_shlibsuffix = env["SHLIBSUFFIX"]

jobs = ARGUMENTS.get("jobs", 4)
platform = ARGUMENTS.get("platform", "linux")
arch = ARGUMENTS.get("arch", "x86_64")
target = ARGUMENTS.get("target", "template_debug").split("_")[-1]
libpath = f"bin/{platform}_{arch}/libgozen{env_suffix}{env_shlibsuffix}"
use_mingw = ARGUMENTS.get("use_mingw", "no")

use_system = ARGUMENTS.get("use_system", "no")

if arch == "arm64":
    env["CC"] = "aarch64-linux-gnu-gcc"
    env["CXX"] = "aarch64-linux-gnu-g++"
    env["LINK"] = "aarch64-linux-gnu-g++"


env.Append(
    CPPPATH=[
        f"ffmpeg/bin_{platform}/include",
        f"ffmpeg/bin_{platform}/aom/include",
        f"ffmpeg/bin_{platform}/svtav1/include",
        f"ffmpeg/bin_{platform}/x264/include",
        f"ffmpeg/bin_{platform}/x265/include",
        f"ffmpeg/bin_{platform}/mp3lame/include",
        f"ffmpeg/bin_{platform}/ogg/include",
        f"ffmpeg/bin_{platform}/opus/include",
        f"ffmpeg/bin_{platform}/vorbis/include",
        f"ffmpeg/bin_{platform}/vpx/include",
    ],
    LIBPATH=[
        f"ffmpeg/bin_{platform}/lib",
        f"ffmpeg/bin_{platform}/aom/lib",
        f"ffmpeg/bin_{platform}/svtav1/lib",
        f"ffmpeg/bin_{platform}/x264/lib",
        f"ffmpeg/bin_{platform}/x265/lib",
        f"ffmpeg/bin_{platform}/mp3lame/lib",
        f"ffmpeg/bin_{platform}/ogg/lib",
        f"ffmpeg/bin_{platform}/opus/lib",
        f"ffmpeg/bin_{platform}/vorbis/lib",
        f"ffmpeg/bin_{platform}/vpx/lib",
    ],
)


if "linux" in platform:
    if use_system == "yes":
        env.Append(
            CPPPATH=["/usr/include/ffmpeg/"],
            LIBS=LIBS_COMMON,
        )
    else:
        env.Append(
            # LINKFLAGS=["-static-libstdc++", '-Wl,-rpath,"$ORIGIN"'],
            LINKFLAGS="-fPIC",
            CCFLAGS=[f"-march={MARCH_FLAGS[arch]}"],
            LIBS=LIBS_COMMON,
        )
elif "windows" in platform:
    if os_platform.system().lower() == "windows" and use_mingw != "yes":
        env.Append(
            LIBS=[
                "avcodec.lib",
                "avformat.lib",
                "avutil.lib",
                "swresample.lib",
                "swscale.lib",
            ]
        )
    else:
        libs = [
            "-lSvtAv1Enc",
            "-laom",
            "-lmp3lame",
            "-lopus",
            "-lvorbis",
            "-lvorbisenc",
            "-logg",  # must be after '-lvorbis'
            "-lvpx",
            "-lx264",
            "-lx265",
            # '-lX11',
            # '-lXext',
            # '-lXv',
            "-ladvapi32",
            # '-landroid',
            # '-lasound',
            "-latomic",
            "-lbcrypt",
            "-lbz2",
            # '-lcamera2ndk',
            # '-lcrystalhd',
            # '-ldl',
            "-lgcc",
            "-lgcc_s",
            "-lgdi32",
            "-liconv",
            "-llzma",
            "-lm",
            # '-lmediandk',
            "-lmfplat",
            "-lole32",
            "-loleaut32",
            "-lpsapi",
            "-lsecur32",
            "-lshell32",
            "-lshlwapi",
            "-lstdc++",
            "-lstrmiids",
            "-luser32",
            "-luuid",
            "-lvfw32",
            # '-lws2',
            "-lws2_32",
            "-lz",
            "-lpthread",  # must be after everything
        ]

        if os_platform.system().lower() != "windows":
            # Some distros don't have certain libraries
            conf = Configure(env)
            found_libs = [
                lflag for lflag in libs if conf.CheckLib(lflag.removeprefix("-l"))
            ]

            if not all(lib in found_libs for lib in libs):
                print("Ignoring libraries not found.")
            conf.env.Append(LIBS=LIBS_COMMON + found_libs)
            env = conf.Finish()
        else:
            env.Append(LIBS=LIBS_COMMON + libs)


src = Glob("gde_gozen/*.cpp")
sharedlib = env.SharedLibrary(libpath, src)
Default(sharedlib)
