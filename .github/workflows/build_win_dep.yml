name: Windows FFmpeg Dependency
on:
  workflow_call:
    inputs:
      dep_name:
        required: true
        type: string
      architecture:
        required: true
        type: string

jobs:
  build-dep:
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - uses: actions/checkout@v3
      - uses: msys2/setup-msys2@v2
        with:
          msystem: UCRT64
          update: true
          install: |
            git
            subversion
            unzip
            mingw-w64-ucrt-x86_64-binutils
            mingw-w64-ucrt-x86_64-crt-git
            mingw-w64-ucrt-x86_64-gcc
            mingw-w64-ucrt-x86_64-gdb
            mingw-w64-ucrt-x86_64-gdb-multiarch
            mingw-w64-ucrt-x86_64-headers-git
            mingw-w64-ucrt-x86_64-libmangle-git
            mingw-w64-ucrt-x86_64-libwinpthread
            mingw-w64-ucrt-x86_64-pkgconf
            mingw-w64-ucrt-x86_64-tools-git
            mingw-w64-ucrt-x86_64-winpthreads
            mingw-w64-ucrt-x86_64-winstorecompat-git
            mingw-w64-ucrt-x86_64-ninja
            mingw-w64-ucrt-x86_64-make
            mingw-w64-ucrt-x86_64-diffutils
            mingw-w64-ucrt-x86_64-yasm
            mingw-w64-ucrt-x86_64-nasm
            mingw-w64-ucrt-x86_64-python
            mingw-w64-ucrt-x86_64-scons
            mingw-w64-ucrt-x86_64-cmake
            mingw-w64-ucrt-x86_64-autotools

      - name: Checkout submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Compile ${{ inputs.dep_name }}
        working-directory: ./libs
        run: |
          if [ "${{ inputs.dep_name }}" == "ogg_vorbis" ]; then
          echo $(nproc) | python3 -c "import sys; sys.path.append('.'); from build_utils import download_deps, build_ffmpeg; download_deps.clone_dep_ogg()"
          echo $(nproc) | python3 -c "import sys; sys.path.append('.'); from build_utils import build_ffmpeg; build_ffmpeg.build_ogg('windows', '${{ inputs.architecture }}', 4, {})"

            echo $(nproc) | python3 -c "import sys; sys.path.append('.'); from build_utils import download_deps, build_ffmpeg; download_deps.clone_dep_vorbis()"
            echo $(nproc) | python3 -c "import sys; sys.path.append('.'); from build_utils import build_ffmpeg; build_ffmpeg.build_vorbis('windows', '${{ inputs.architecture }}', 4, {})"
          else
            echo $(nproc) | python3 -c "import sys; sys.path.append('.'); from build_utils import download_deps, build_ffmpeg; download_deps.clone_dep_${{ inputs.dep_name }}()"
            echo $(nproc) | python3 -c "import sys; sys.path.append('.'); from build_utils import build_ffmpeg; build_ffmpeg.build_${{ inputs.dep_name }}('windows', '${{ inputs.architecture }}', 4, {})"
          fi

      - name: Upload ${{ inputs.dep_name }}
        uses: actions/upload-artifact@v4
        with:
          name: dep_win_${{ inputs.architecture }}_${{ inputs.dep_name }}
          path: libs/ffmpeg/bin_windows
          retention-days: 1

