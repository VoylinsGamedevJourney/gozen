name: 02 | AppImage

on:
  workflow_call:
    inputs:
      version:
        required: true
        type: string
  workflow_dispatch:
    inputs:
      version:
        description: Version
        type: string
        default: v0.0
        
env:
  GODOT_VERSION: 4.4.1
  EXPORT_FOLDER: libs/bin/linux_x86_64
  APP_NAME: gozen
  APPIMAGE_DIR: ${{ github.workspace }}/gozen.AppDir
  ARTIFACT_NAME: ffmpeg_windows_x86_64

run-name: 'AppImage version: ${{ inputs.version }} by @${{ github.actor }}'

jobs:
  build-appimage:
    name: Build GoZen AppImage
    runs-on: ubuntu-22.04
    permissions:
      actions: read
      contents: read
    steps:
      - name: Installing dependencies
        run: |
          sudo add-apt-repository ppa:git-core/ppa
          sudo apt update

          sudo apt-get install -y git git-svn bash yasm nasm python3 python3-pip scons gcc diffutils make wget unzip tar \
          cmake autoconf automake libtool ninja-build pkg-config \
          binutils-aarch64-linux-gnu gcc-aarch64-linux-gnu \
          libnuma-dev fuse libfuse2 desktop-file-utils patchelf

      - name: Checkout submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Get latest run ID for "Compile GDE"
        id: get_ffmpeg_workflow_run_id
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          WORKFLOW_NAME="11 | Compile GDE"
          LATEST_RUN_ID=$(gh run list --workflow "${WORKFLOW_NAME}" --json databaseId --jq '.[0].databaseId')

          if [ -z "$LATEST_RUN_ID" ]; then
            echo "Error: Could not find latest run ID for workflow '${WORKFLOW_NAME}'."
            exit 1
          fi

          echo "Found latest run ID: $LATEST_RUN_ID"
          echo "latest_run_id=$LATEST_RUN_ID" >> "$GITHUB_OUTPUT"

      - name: Get GDE artifact
        uses: actions/download-artifact@v4
        with:
          name: linux_gde
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ steps.get_ffmpeg_workflow_run_id.outputs.latest_run_id }}
          path: ./libs/bin/linux_x86_64

      - name: Cache Godot
        uses: actions/cache@v4
        with:
          path: ~/.local/share/godot
          key: ${{ runner.os }}-ubuntu-godot-${{ env.GODOT_VERSION }}

      - name: Prepare Godot
        run: |
          if [ ! -f Godot_v${{ env.GODOT_VERSION }}-stable.x86_64 ]; then
            echo "Downloading Godot editor ..."
            wget -q -O godot_linux.zip https://github.com/godotengine/godot-builds/releases/download/${{ env.GODOT_VERSION }}-stable/Godot_v${{ env.GODOT_VERSION }}-stable_linux.x86_64.zip
            unzip -o godot_linux.zip
          else
            echo "Godot editor found in cache."
          fi

          if [ ! -d ~/.local/share/godot/export_templates/${{ env.GODOT_VERSION }}.stable ]; then
            echo "Downloading Godot export templates ..."
            wget -q -O godot_export_templates.tpz https://github.com/godotengine/godot-builds/releases/download/${{ env.GODOT_VERSION }}-stable/Godot_v${{ env.GODOT_VERSION }}-stable_export_templates.tpz
            mkdir -p ~/.local/share/godot/export_templates/${{ env.GODOT_VERSION }}.stable
            unzip -o godot_export_templates.tpz -d ~/.local/share/godot/export_templates/${{ env.GODOT_VERSION }}.stable
            mv ~/.local/share/godot/export_templates/${{ env.GODOT_VERSION }}.stable/templates/* ~/.local/share/godot/export_templates/${{ env.GODOT_VERSION }}.stable/
            rm -rf ~/.local/share/godot/export_templates/${{ env.GODOT_VERSION }}.stable/templates
          else
            echo "Godot export templates found in cache."
          fi

          sed -i 's|^config/version\s*=.*|config/version="${{ inputs.version }}"|' src/project.godot

      - name: Export for Linux
        working-directory: ./src
        run: |
          mkdir -p ../${{ env.EXPORT_FOLDER }}
          ../Godot_v${{ env.GODOT_VERSION }}-stable_linux.x86_64 --import godot.project --headless --export-release Linux_x86_64 ../${{ env.EXPORT_FOLDER }}/${{ env.APP_NAME }}.x86_64
          ../Godot_v${{ env.GODOT_VERSION }}-stable_linux.x86_64 --headless --export-release Linux_x86_64 ../${{ env.EXPORT_FOLDER }}/${{ env.APP_NAME }}.x86_64

      - name: Removing debug gde
        run: rm ${{ env.EXPORT_FOLDER }}/libgozen*debug*.so

      - name: Create AppDir structure
        run: |
          mkdir -p ${{ env.APPIMAGE_DIR }}/usr/bin
          mkdir -p ${{ env.APPIMAGE_DIR }}/usr/lib
          mkdir -p ${{ env.APPIMAGE_DIR }}/usr/share/applications
          mkdir -p ${{ env.APPIMAGE_DIR }}/usr/share/icons/hicolor/128x128/apps
          mkdir -p ${{ env.APPIMAGE_DIR }}/usr/share/doc/${{ env.APP_NAME }}
          echo "AppDir structure created at ${{ env.APPIMAGE_DIR }}"

      - name: Copy app files to AppDir
        run : |
          cp ${{ env.EXPORT_FOLDER }}/${{ env.APP_NAME }}.x86_64 ${{ env.APPIMAGE_DIR }}/usr/bin/${{ env.APP_NAME }}
          cp ${{ env.EXPORT_FOLDER }}/libgozen*.so ${{ env.APPIMAGE_DIR }}/usr/lib/
          cp ${{ env.EXPORT_FOLDER }}/*.so.* ${{ env.APPIMAGE_DIR }}/usr/lib/
          cp ${{ env.EXPORT_FOLDER }}/*.so ${{ env.APPIMAGE_DIR }}/usr/lib/
          ls ${{ env.EXPORT_FOLDER }}/
          
          cp assets/gozen_icon.png "${{ env.APPIMAGE_DIR }}/usr/share/icons/hicolor/128x128/apps/${{ env.APP_NAME }}.png"
          cp assets/gozen_icon.png "${{ env.APPIMAGE_DIR }}/${{ env.APP_NAME }}.png"

          cp LICENSE ${{ env.APPIMAGE_DIR }}/usr/share/doc/${{ env.APP_NAME }}/LICENSE
          cp MANUAL.md ${{ env.APPIMAGE_DIR }}/usr/share/doc/${{ env.APP_NAME }}/MANUAL.md
          cp gozen.desktop ${{ env.APPIMAGE_DIR }}/gozen.desktop
          cp gozen.desktop ${{ env.APPIMAGE_DIR }}/usr/share/applications/gozen.desktop
          desktop-file-validate ${{ env.APPIMAGE_DIR }}/${{ env.APP_NAME }}.desktop
          echo "Application files copied to AppDir."

      - name: Create AppRun script
        run: |
          cat <<EOF > ${{ env.APPIMAGE_DIR }}/AppRun
          #!/bin/bash
          APPIMAGE_PATH="\$(readlink -f "\${0}")"
          APPDIR="\$(dirname "\${APPIMAGE_PATH}")"
          export LD_LIBRARY_PATH="$APPDIR/usr/lib:$LD_LIBRARY_PATH"

          cd "\${APPDIR}/usr/bin"

          exec "./${{ env.APP_NAME }}" "\$@"
          EOF
          chmod +x ${{ env.APPIMAGE_DIR }}/AppRun
          echo "AppRun script created."

      - name: Download linuxdeploy
        run: |
          wget -q https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage -O linuxdeploy
          chmod +x linuxdeploy
          echo "linuxdeploy downloaded."

      - name: Bundle dependencies and create AppImage
        run: |
          export LD_LIBRARY_PATH="${{ env.APPIMAGE_DIR }}/usr/lib:$LD_LIBRARY_PATH"

          chmod +x ${{ env.APPIMAGE_DIR }}/usr/bin/${{ env.APP_NAME }}
          export VERSION=${{ inputs.version }}
          
          ./linuxdeploy --appdir ${{ env.APPIMAGE_DIR }} \
            -e ${{ env.APPIMAGE_DIR }}/usr/bin/${{ env.APP_NAME }} \
            -d ${{ env.APPIMAGE_DIR }}/${{ env.APP_NAME }}.desktop \
            -i ${{ env.APPIMAGE_DIR }}/${{ env.APP_NAME }}.png \
            --output appimage
          
          GENERATED_APPIMAGE_NAME=$(find . -maxdepth 1 -name "*.AppImage" -print -quit)
          if [ -z "$GENERATED_APPIMAGE_NAME" ]; then
            echo "Error: linuxdeploy did not create an AppImage."
            exit 1
          fi
          mv "${GENERATED_APPIMAGE_NAME}" "${{ env.APP_NAME }}-${{ inputs.version }}-x86_64.AppImage"
          echo "AppImage created and renamed to: ${{ env.APP_NAME }}-${{ inputs.version }}-x86_64.AppImage"
          ls -l *.AppImage

      - name: Upload AppImage Artifact
        uses: actions/upload-artifact@v4
        with:
          name: GoZen_Linux_AppImage_${{ inputs.version }}
          path: ${{ env.APP_NAME }}-${{ inputs.version }}-x86_64.AppImage
          if-no-files-found: error # Fails the workflow if the AppImage isn't found

