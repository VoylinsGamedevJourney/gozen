name: 11 | Compile GDE
on:
  workflow_call:
  workflow_dispatch:
  schedule:
    - cron: '0 0 1 * *' # Runs at 00:00 UTC on the 1st day of every month
        
env:
  GODOT_VERSION: 4.4.1
  EXPORT_FOLDER_LINUX: libs/bin/linux_x86_64
  EXPORT_FOLDER_WINDOWS: libs/bin/windows_x86_64
 
run-name: 'Compile GDE'
jobs:
  build-linux-gde-debug:
    name: Linux GDE debug
    runs-on: ubuntu-22.04
    permissions:
      actions: read
      contents: read
    steps:
      - name: Installing dependencies
        run: |
          sudo add-apt-repository ppa:git-core/ppa
          sudo apt update

          sudo apt-get install -y git git-svn bash yasm nasm python3 python3-pip scons gcc diffutils make wget unzip tar \
          cmake autoconf automake libtool ninja-build pkg-config \
          binutils-aarch64-linux-gnu gcc-aarch64-linux-gnu \
          libnuma-dev fuse libfuse2 desktop-file-utils patchelf

      - name: Checkout submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Get latest run ID for "Compile FFmpeg"
        id: get_ffmpeg_workflow_run_id
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          WORKFLOW_NAME="10 | Compile FFmpeg"
          LATEST_RUN_ID=$(gh run list --workflow "${WORKFLOW_NAME}" --json databaseId --jq '.[0].databaseId')

          if [ -z "$LATEST_RUN_ID" ]; then
            echo "Error: Could not find latest run ID for workflow '${WORKFLOW_NAME}'."
            exit 1
          fi

          echo "Found latest run ID: $LATEST_RUN_ID"
          echo "latest_run_id=$LATEST_RUN_ID" >> "$GITHUB_OUTPUT"

      - name: Get FFmpeg artifact
        uses: actions/download-artifact@v4
        with:
          name: ffmpeg_linux_x86_64
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ steps.get_ffmpeg_workflow_run_id.outputs.latest_run_id }}
          path: ./libs/ffmpeg/bin_linux

      - name: Copy ffmpeg libs
        working-directory: ./libs
        run: echo $(nproc) | python3 -c "import sys; sys.path.append('.'); from build_utils import build_ffmpeg; build_ffmpeg.copy_lib_files_linux('x86_64')"

      - name: Compiling GDE GoZen debug
        working-directory: ./libs
        run: scons -j$(nproc) target=template_debug platform=linux arch=x86_64

      - name: Upload debug
        uses: actions/upload-artifact@v4
        with:
          name: linux_gde_debug
          path: ${{ env.EXPORT_FOLDER_LINUX }}
          retention-days: 1


  build-linux-gde-release:
    name: Linux GDE release
    runs-on: ubuntu-22.04
    permissions:
      actions: read
      contents: read
    steps:
      - name: Installing dependencies
        run: |
          sudo add-apt-repository ppa:git-core/ppa
          sudo apt update

          sudo apt-get install -y git git-svn bash yasm nasm python3 python3-pip scons gcc diffutils make wget unzip tar \
          cmake autoconf automake libtool ninja-build pkg-config \
          binutils-aarch64-linux-gnu gcc-aarch64-linux-gnu \
          libnuma-dev fuse libfuse2 desktop-file-utils patchelf

      - name: Checkout submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Get latest run ID for "Compile FFmpeg"
        id: get_ffmpeg_workflow_run_id
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          WORKFLOW_NAME="10 | Compile FFmpeg"
          LATEST_RUN_ID=$(gh run list --workflow "${WORKFLOW_NAME}" --json databaseId --jq '.[0].databaseId')

          if [ -z "$LATEST_RUN_ID" ]; then
            echo "Error: Could not find latest run ID for workflow '${WORKFLOW_NAME}'."
            exit 1
          fi

          echo "Found latest run ID: $LATEST_RUN_ID"
          echo "latest_run_id=$LATEST_RUN_ID" >> "$GITHUB_OUTPUT"

      - name: Get FFmpeg artifact
        uses: actions/download-artifact@v4
        with:
          name: ffmpeg_linux_x86_64
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ steps.get_ffmpeg_workflow_run_id.outputs.latest_run_id }}
          path: ./libs/ffmpeg/bin_linux

      - name: Copy ffmpeg libs
        working-directory: ./libs
        run: echo $(nproc) | python3 -c "import sys; sys.path.append('.'); from build_utils import build_ffmpeg; build_ffmpeg.copy_lib_files_linux('x86_64')"

      - name: Compiling GDE GoZen release
        working-directory: ./libs
        run: scons -j$(nproc) target=template_release platform=linux arch=x86_64

      - name: Upload release
        uses: actions/upload-artifact@v4
        with:
          name: linux_gde_release
          path: ${{ env.EXPORT_FOLDER_LINUX }}
          retention-days: 1

  build-linux-gde:
    needs: [build-linux-gde-debug, build-linux-gde-release]
    name: Linux GDE
    runs-on: ubuntu-22.04
    permissions:
      actions: read
      contents: read
    steps:
      - name: Installing dependencies
        run: |
          sudo add-apt-repository ppa:git-core/ppa
          sudo apt update

          sudo apt-get install -y git git-svn bash yasm nasm python3 python3-pip scons gcc diffutils make wget unzip tar \
          cmake autoconf automake libtool ninja-build pkg-config \
          binutils-aarch64-linux-gnu gcc-aarch64-linux-gnu \
          libnuma-dev fuse libfuse2 desktop-file-utils patchelf

      - name: Checkout submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Get debug
        uses: actions/download-artifact@v4
        with:
          name: linux_gde_debug
          path: ${{ env.EXPORT_FOLDER_LINUX }}

      - name: Get release
        uses: actions/download-artifact@v4
        with:
          name: linux_gde_release
          path: ${{ env.EXPORT_FOLDER_LINUX }}

      - name: Upload release
        uses: actions/upload-artifact@v4
        with:
          name: linux_gde
          path: ${{ env.EXPORT_FOLDER_LINUX }}
          retention-days: 30

  build-windows-gde-debug:
    name: Windows GDE debug
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    permissions:
      actions: read
      contents: read
    steps:
      - uses: actions/checkout@v3
      - uses: msys2/setup-msys2@v2
        with:
          msystem: UCRT64
          update: true
          install: |
            git
            subversion
            unzip
            mingw-w64-ucrt-x86_64-binutils
            mingw-w64-ucrt-x86_64-crt-git
            mingw-w64-ucrt-x86_64-gcc
            mingw-w64-ucrt-x86_64-gdb
            mingw-w64-ucrt-x86_64-gdb-multiarch
            mingw-w64-ucrt-x86_64-headers-git
            mingw-w64-ucrt-x86_64-libmangle-git
            mingw-w64-ucrt-x86_64-libwinpthread
            mingw-w64-ucrt-x86_64-pkgconf
            mingw-w64-ucrt-x86_64-tools-git
            mingw-w64-ucrt-x86_64-winpthreads
            mingw-w64-ucrt-x86_64-winstorecompat-git
            mingw-w64-ucrt-x86_64-ninja
            mingw-w64-ucrt-x86_64-make
            mingw-w64-ucrt-x86_64-diffutils
            mingw-w64-ucrt-x86_64-yasm
            mingw-w64-ucrt-x86_64-nasm
            mingw-w64-ucrt-x86_64-python
            mingw-w64-ucrt-x86_64-scons
            mingw-w64-ucrt-x86_64-cmake
            mingw-w64-ucrt-x86_64-autotools

      - name: Checkout submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Get latest run ID for "Compile FFmpeg"
        id: get_ffmpeg_workflow_run_id
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          WORKFLOW_NAME="10 | Compile FFmpeg"
          LATEST_RUN_ID=$(gh run list --workflow "${WORKFLOW_NAME}" --json databaseId --jq '.[0].databaseId')

          if [ -z "$LATEST_RUN_ID" ]; then
            echo "Error: Could not find latest run ID for workflow '${WORKFLOW_NAME}'."
            exit 1
          fi

          echo "Found latest run ID: $LATEST_RUN_ID"
          echo "latest_run_id=$LATEST_RUN_ID" >> "$GITHUB_OUTPUT"

      - name: Get FFmpeg artifact
        uses: actions/download-artifact@v4
        with:
          name: ffmpeg_windows_x86_64
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ steps.get_ffmpeg_workflow_run_id.outputs.latest_run_id }}
          path: ./libs/ffmpeg/bin_windows

      - name: Copy ffmpeg libs
        working-directory: ./libs
        run: echo $(nproc) | python3 -c "import sys; sys.path.append('.'); from build_utils import build_ffmpeg; build_ffmpeg.copy_lib_files_windows('x86_64')"

      - name: Compiling GDE GoZen debug
        working-directory: ./libs
        run: scons -j$(nproc) target=template_debug platform=windows arch=x86_64 use_static_cpp=yes use_mingw=yes

      - name: Upload debug
        uses: actions/upload-artifact@v4
        with:
          name: windows_gde_debug
          path: ${{ env.EXPORT_FOLDER_WINDOWS }}
          retention-days: 1


  build-windows-gde-release:
    name: Windows GDE release
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    permissions:
      actions: read
      contents: read
    steps:
      - uses: actions/checkout@v3
      - uses: msys2/setup-msys2@v2
        with:
          msystem: UCRT64
          update: true
          install: |
            git
            subversion
            unzip
            mingw-w64-ucrt-x86_64-binutils
            mingw-w64-ucrt-x86_64-crt-git
            mingw-w64-ucrt-x86_64-gcc
            mingw-w64-ucrt-x86_64-gdb
            mingw-w64-ucrt-x86_64-gdb-multiarch
            mingw-w64-ucrt-x86_64-headers-git
            mingw-w64-ucrt-x86_64-libmangle-git
            mingw-w64-ucrt-x86_64-libwinpthread
            mingw-w64-ucrt-x86_64-pkgconf
            mingw-w64-ucrt-x86_64-tools-git
            mingw-w64-ucrt-x86_64-winpthreads
            mingw-w64-ucrt-x86_64-winstorecompat-git
            mingw-w64-ucrt-x86_64-ninja
            mingw-w64-ucrt-x86_64-make
            mingw-w64-ucrt-x86_64-diffutils
            mingw-w64-ucrt-x86_64-yasm
            mingw-w64-ucrt-x86_64-nasm
            mingw-w64-ucrt-x86_64-python
            mingw-w64-ucrt-x86_64-scons
            mingw-w64-ucrt-x86_64-cmake
            mingw-w64-ucrt-x86_64-autotools

      - name: Checkout submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Get latest run ID for "Compile FFmpeg"
        id: get_ffmpeg_workflow_run_id
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          WORKFLOW_NAME="10 | Compile FFmpeg"
          LATEST_RUN_ID=$(gh run list --workflow "${WORKFLOW_NAME}" --json databaseId --jq '.[0].databaseId')

          if [ -z "$LATEST_RUN_ID" ]; then
            echo "Error: Could not find latest run ID for workflow '${WORKFLOW_NAME}'."
            exit 1
          fi

          echo "Found latest run ID: $LATEST_RUN_ID"
          echo "latest_run_id=$LATEST_RUN_ID" >> "$GITHUB_OUTPUT"

      - name: Get FFmpeg artifact
        uses: actions/download-artifact@v4
        with:
          name: ffmpeg_windows_x86_64
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ steps.get_ffmpeg_workflow_run_id.outputs.latest_run_id }}
          path: ./libs/ffmpeg/bin_windows

      - name: Copy ffmpeg libs
        working-directory: ./libs
        run: echo $(nproc) | python3 -c "import sys; sys.path.append('.'); from build_utils import build_ffmpeg; build_ffmpeg.copy_lib_files_windows('x86_64')"

      - name: Compiling GDE GoZen release
        working-directory: ./libs
        run: scons -j$(nproc) target=template_release platform=windows arch=x86_64 use_static_cpp=yes use_mingw=yes

      - name: Upload release
        uses: actions/upload-artifact@v4
        with:
          name: windows_gde_release
          path: ${{ env.EXPORT_FOLDER_WINDOWS }}
          retention-days: 1


  build-windows-gde:
    needs: [build-windows-gde-debug, build-windows-gde-release]
    name: Windows GDE
    runs-on: ubuntu-22.04
    permissions:
      actions: read
      contents: read
    steps:
      - name: Installing dependencies
        run: |
          sudo add-apt-repository ppa:git-core/ppa
          sudo apt update

          sudo apt-get install -y git git-svn bash yasm nasm python3 python3-pip scons gcc diffutils make wget unzip tar \
          cmake autoconf automake libtool ninja-build pkg-config \
          binutils-aarch64-linux-gnu gcc-aarch64-linux-gnu \
          libnuma-dev fuse libfuse2 desktop-file-utils patchelf

      - name: Checkout submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Get debug
        uses: actions/download-artifact@v4
        with:
          name: windows_gde_debug
          path: ${{ env.EXPORT_FOLDER_WINDOWS }}

      - name: Get release
        uses: actions/download-artifact@v4
        with:
          name: windows_gde_release
          path: ${{ env.EXPORT_FOLDER_WINDOWS }}

      - name: Upload release
        uses: actions/upload-artifact@v4
        with:
          name: windows_gde
          path: ${{ env.EXPORT_FOLDER_WINDOWS }}
          retention-days: 30

