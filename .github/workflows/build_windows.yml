name: 'Windows'

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version'
        type: string
        default: 'v0.0'
        
env:
  GODOT_VERSION: 4.4.1
  EXPORT_FOLDER: bin/windows_x86_64

run-name: 'Build GoZen for Windows version: ${{ inputs.version }} by @${{ github.actor }}'

jobs:
  build-ffmpeg:
    name: 'Build FFmpeg'
    runs-on: ubuntu-22.04
    steps:
      - name: 'Installing dependencies'
        run: |
          sudo apt-get update
          sudo apt-get install -y git bash yasm python3 python3-pip scons gcc diffutils make wget unzip tar mingw-w64 ffmpeg nasm cmake pkg-config libnuma-dev fuse libfuse2 desktop-file-utils patchelf golang perl texinfo

      - name: 'Checkout submodules'
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: 'Compiling FFmpeg for Windows'
        working-directory: ./libs
        run: |
          python -c 'import sys; sys.path.append("."); import build; build.compile_ffmpeg_windows("x86_64")'

      - name: 'Upload FFmpeg binaries'
        uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-windows-bin
          path: libs/ffmpeg/bin_windows
          retention-days: 1


  build-gozen:
    name: 'Build GoZen'
    runs-on: windows-latest
    needs: build-ffmpeg
    steps:
      - name: 'Checkout submodules'
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: 'Download FFmpeg binaries'
        uses: actions/download-artifact@v4
        with:
          name: ffmpeg-windows-bin
          path: libs/ffmpeg/bin_windows

      - name: 'Set up Python'
        uses: actions/setup-python@v5
        with:
          python-version: 3.x

      - name: 'Install Python dependencies'
        run: pip install scons

      - name: 'Set Godot version and patch project'
        run: |
          python -c 'import sys; sys.path.append("."); import update_version; update_version.update_version("${{ inputs.version }}")'

      - name: 'Compiling GDE GoZen'
        working-directory: ./libs
        run: |
          python -c 'import sys; sys.path.append("."); import build; build.copy_lib_files_windows("x86_64")'
          scons -j4 target=template_debug platform=windows arch=x86_64
          scons -j4 target=template_release platform=windows arch=x86_64

      - name: 'Prepare folder'
        run: |
          mkdir -p ${{ env.EXPORT_FOLDER }}
          cp LICENSE ${{ env.EXPORT_FOLDER }}/LICENSE
          cp MANUAL.md ${{ env.EXPORT_FOLDER }}/MANUAL.md

      - name: 'Download Godot'
        run: |
          Invoke-WebRequest -Uri "https://github.com/godotengine/godot-builds/releases/download/${{ env.GODOT_VERSION }}-stable/Godot_v${{ env.GODOT_VERSION }}-stable_win64.exe.zip" -OutFile "godot.zip"
          Expand-Archive godot.zip -DestinationPath .

      - name: 'Download Godot export templates'
        run: |
          Invoke-WebRequest -Uri "https://github.com/godotengine/godot-builds/releases/download/${{ env.GODOT_VERSION }}-stable/Godot_v${{ env.GODOT_VERSION }}-stable_export_templates.tpz" -OutFile "templates.tpz"
          $exportPath = "$env:APPDATA\Godot\export_templates\${{ env.GODOT_VERSION }}.stable"
          New-Item -ItemType Directory -Force -Path $exportPath
          Expand-Archive -Path templates.tpz -DestinationPath $exportPath
          if (Test-Path "$exportPath\templates") {
            Move-Item "$exportPath\templates\*" $exportPath
            Remove-Item "$exportPath\templates" -Recurse
          }

      - name: 'Export project for Windows'
        working-directory: ./src
        run: |
          ../Godot_v${{ env.GODOT_VERSION }}-stable_win64_console.exe --import godot.project --headless
          ../Godot_v${{ env.GODOT_VERSION }}-stable_win64_console.exe --headless --export-release Windows_x86_64 ../${{ env.EXPORT_FOLDER }}/GoZen.exe

      - name: 'Copy extra DLLs'
        run: copy libs\bin\windows_x86_64\*.dll $env:EXPORT_FOLDER\

      - name: 'Upload GDE'
        uses: actions/upload-artifact@v4
        with:
          name: gde-windows-bin
          path: libs/bin
          retention-days: 1

      - name: 'Upload Windows'
        uses: actions/upload-artifact@v4
        with:
          name: GoZen_Windows_x86_64_${{ inputs.version }}
          path: ${{ env.EXPORT_FOLDER }}
          retention-days: 2
