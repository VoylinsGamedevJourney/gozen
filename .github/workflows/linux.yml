name: 01 | Linux
on:
  workflow_call:
    inputs:
      version:
        required: true
        type: string
  workflow_dispatch:
    inputs:
      version:
        description: Version
        type: string
        default: v0.0
        
env:
  GODOT_VERSION: 4.4.1
  EXPORT_FOLDER: libs/bin/linux_x86_64

run-name: 'Linux version: ${{ inputs.version }} by @${{ github.actor }}'
jobs:
  build-linux:
    name: Build GoZen
    runs-on: ubuntu-22.04
    permissions:
      actions: read
      contents: read
    steps:
      - name: Installing dependencies
        run: |
          sudo add-apt-repository ppa:git-core/ppa
          sudo apt update

          sudo apt-get install -y git git-svn bash yasm nasm python3 python3-pip scons gcc diffutils make wget unzip tar \
          cmake autoconf automake libtool ninja-build pkg-config \
          binutils-aarch64-linux-gnu gcc-aarch64-linux-gnu \
          libnuma-dev fuse libfuse2 desktop-file-utils patchelf

      - name: Checkout submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Get latest run ID for "Compile GDE"
        id: get_ffmpeg_workflow_run_id
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          WORKFLOW_NAME="11 | Compile GDE"
          LATEST_RUN_ID=$(gh run list --workflow "${WORKFLOW_NAME}" --json databaseId --jq '.[0].databaseId')

          if [ -z "$LATEST_RUN_ID" ]; then
            echo "Error: Could not find latest run ID for workflow '${WORKFLOW_NAME}'."
            exit 1
          fi

          echo "Found latest run ID: $LATEST_RUN_ID"
          echo "latest_run_id=$LATEST_RUN_ID" >> "$GITHUB_OUTPUT"

      - name: Get GDE artifact
        uses: actions/download-artifact@v4
        with:
          name: linux_gde
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ steps.get_ffmpeg_workflow_run_id.outputs.latest_run_id }}
          path: ./libs/bin/linux_x86_64

      - name: Cache Godot
        uses: actions/cache@v4
        with:
          path: ~/.local/share/godot
          key: ${{ runner.os }}-godot-${{ env.GODOT_VERSION }}

      - name: Prepare Godot
        run: |
          if [ ! -f Godot_v${{ env.GODOT_VERSION }}-stable.x86_64 ]; then
            echo "Downloading Godot editor ..."
            wget -q -O godot_linux.zip https://github.com/godotengine/godot-builds/releases/download/${{ env.GODOT_VERSION }}-stable/Godot_v${{ env.GODOT_VERSION }}-stable_linux.x86_64.zip
            unzip -o godot_linux.zip
          else
            echo "Godot editor found in cache."
          fi

          if [ ! -d ~/.local/share/godot/export_templates/${{ env.GODOT_VERSION }}.stable ]; then
            echo "Downloading Godot export templates ..."
            wget -q -O godot_export_templates.tpz https://github.com/godotengine/godot-builds/releases/download/${{ env.GODOT_VERSION }}-stable/Godot_v${{ env.GODOT_VERSION }}-stable_export_templates.tpz
            mkdir -p ~/.local/share/godot/export_templates/${{ env.GODOT_VERSION }}.stable
            unzip -o godot_export_templates.tpz -d ~/.local/share/godot/export_templates/${{ env.GODOT_VERSION }}.stable
            mv ~/.local/share/godot/export_templates/${{ env.GODOT_VERSION }}.stable/templates/* ~/.local/share/godot/export_templates/${{ env.GODOT_VERSION }}.stable/
            rm -rf ~/.local/share/godot/export_templates/${{ env.GODOT_VERSION }}.stable/templates
          else
            echo "Godot export templates found in cache."
          fi

          sed -i 's|^config/version\s*=.*|config/version="${{ inputs.version }}"|' src/project.godot

      - name: Prepare folder
        run: |
          cp LICENSE ${{ env.EXPORT_FOLDER }}/LICENSE
          cp MANUAL.md ${{ env.EXPORT_FOLDER }}/MANUAL.md

      - name: Export for Linux
        working-directory: ./src
        run: |
          ../Godot_v${{ env.GODOT_VERSION }}-stable_linux.x86_64 --import godot.project --headless --export-release Linux_x86_64 ../${{ env.EXPORT_FOLDER }}/GoZen.x86_64
          ../Godot_v${{ env.GODOT_VERSION }}-stable_linux.x86_64 --headless --export-release Linux_x86_64 ../${{ env.EXPORT_FOLDER }}/GoZen.x86_64

      - name: Fix RPATH
        working-directory: ${{ env.EXPORT_FOLDER }}
        run: |
          find . -maxdepth 1 -name "*.so*" -exec sudo patchelf --set-rpath '$ORIGIN' {} \;
          find . -maxdepth 1 -name "*.x86_64" -exec sudo patchelf --set-rpath '$ORIGIN' {} \;

      - name: Remove unnecessary libs
        working-directory: ${{ env.EXPORT_FOLDER }}
        run: |
          rm *template_debug.*
          rm *stdc++.so*

      - name: Upload Linux
        uses: actions/upload-artifact@v4
        with:
          name: GoZen_Linux_x86_64_${{ inputs.version }}
          path: ${{ env.EXPORT_FOLDER }}
          retention-days: 2

